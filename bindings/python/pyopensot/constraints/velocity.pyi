from typing import Literal, Set, TypeVar, overload

import numpy
import pyopensot

M = TypeVar("M", bound=int)
N = TypeVar("N", bound=int)


class CollisionAvoidance(pyopensot.Constraint):
    def __init__(self, arg0, max_pairs: int = ..., collision_urdf=...,
                 collision_srdf=...) -> None: ...

    def addCollisionShape(self, *args, **kwargs): ...

    def collisionModelUpdated(self) -> None: ...

    def getCollisionJacobian(self) -> numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]: ...

    def getCollisionModel(self, *args, **kwargs): ...

    def getDetectionThreshold(self) -> float: ...

    def getLinkPairThreshold(self) -> float: ...

    def getOrderedDistanceVector(self, arg0: list[float]) -> None: ...

    def getOrderedLinkPairVector(self, arg0: list[tuple[str, str]]) -> None: ...

    def getOrderedWitnessPointVector(self, arg0: list[tuple[
        numpy.ndarray[tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]]]) -> None: ...

    def moveCollisionShape(self, *args, **kwargs): ...

    def setBoundScaling(self, arg0: float) -> None: ...

    def setCollisionList(self, arg0: Set[tuple[str, str]]) -> None: ...

    def setDetectionThreshold(self, arg0: float) -> None: ...

    def setLinkPairThreshold(self, arg0: float) -> None: ...

    def setLinksVsEnvironment(self, arg0: Set[str]) -> None: ...

    def setMaxPairs(self, arg0: int) -> None: ...

    def update(self) -> None: ...


class JointLimits(pyopensot.Constraint):
    def __init__(self, arg0, arg1: numpy.ndarray[tuple[N, Literal[1]], numpy.dtype[numpy.float64]],
                 arg2: numpy.ndarray[tuple[N, Literal[1]], numpy.dtype[numpy.float64]],
                 boundScaling: float = ...) -> None: ...

    def setBoundScaling(self, arg0: float) -> None: ...

    def update(self) -> None: ...


class OmniWheels4X(pyopensot.Constraint):
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: list[str], arg4: str,
                 arg5) -> None: ...

    def update(self) -> None: ...


class VelocityLimits(pyopensot.Constraint):
    @overload
    def __init__(self, arg0, arg1: float, arg2: float) -> None: ...

    @overload
    def __init__(self, arg0, arg1: numpy.ndarray[tuple[N, Literal[1]], numpy.dtype[numpy.float64]],
                 arg2: float) -> None: ...

    def getDT(self) -> float: ...

    def getVelocityLimits(self) -> numpy.ndarray[
        tuple[N, Literal[1]], numpy.dtype[numpy.float64]]: ...

    @overload
    def setVelocityLimits(self, arg0: float) -> None: ...

    @overload
    def setVelocityLimits(self, arg0: numpy.ndarray[
        tuple[N, Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    def update(self) -> None: ...
