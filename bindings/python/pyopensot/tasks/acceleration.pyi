from typing import Literal, overload, TypeVar

import numpy
import pyopensot

M = TypeVar("M", bound=int)
N = TypeVar("N", bound=int)


class AngularMomentum(pyopensot.Task):
    def __init__(self, arg0, arg1: pyopensot.AffineHelper) -> None: ...

    def getBaseLink(self) -> str: ...

    def getDistalLink(self) -> str: ...

    def getReference(self) -> tuple[
        numpy.ndarray[tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]]: ...

    def reset(self) -> bool: ...

    def setMomentumGain(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[3]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setReference(self,
                     arg0: numpy.ndarray[tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]],
                     arg1: numpy.ndarray[
                         tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...


class Cartesian(pyopensot.Task):
    @overload
    def __init__(self, arg0: str, arg1, arg2: str, arg3: str) -> None: ...

    @overload
    def __init__(self, arg0: str, arg1, arg2: str, arg3: str,
                 arg4: pyopensot.AffineHelper) -> None: ...

    def baseLinkIsWorld(self) -> bool: ...

    def getActualPose(self, *args, **kwargs): ...

    def getActualTwist(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getBaseLink(self) -> str: ...

    def getCachedAccelerationReference(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getCachedVelocityReference(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getCachedVirtualForceReference(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getDistalLink(self) -> str: ...

    def getError(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getGainType(self, *args, **kwargs): ...

    def getKd(self) -> numpy.ndarray[tuple[Literal[6], Literal[6]], numpy.dtype[numpy.float64]]: ...

    def getKp(self) -> numpy.ndarray[tuple[Literal[6], Literal[6]], numpy.dtype[numpy.float64]]: ...

    def getLambda2(self) -> float: ...

    def getOrientationErrorGain(self) -> float: ...

    def getReference(self, *args, **kwargs): ...

    def getVelocityError(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def reset(self) -> bool: ...

    def setBaseLink(self, arg0: str) -> bool: ...

    def setDistalLink(self, arg0: str) -> bool: ...

    def setGainType(self, arg0) -> None: ...

    def setGains(self,
                 arg0: numpy.ndarray[tuple[Literal[6], Literal[6]], numpy.dtype[numpy.float64]],
                 arg1: numpy.ndarray[
                     tuple[Literal[6], Literal[6]], numpy.dtype[numpy.float64]]) -> None: ...

    def setKd(self, arg0: numpy.ndarray[
        tuple[Literal[6], Literal[6]], numpy.dtype[numpy.float64]]) -> None: ...

    def setKp(self, arg0: numpy.ndarray[
        tuple[Literal[6], Literal[6]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setLambda(self, arg0: float, arg1: float) -> None: ...

    @overload
    def setLambda(self, arg0: float) -> None: ...

    def setOrientationGain(self, arg0: float) -> None: ...

    def setReference(self, *args, **kwargs): ...

    def setVirtualForce(self, arg0: numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...


class CoM(pyopensot.Task):
    @overload
    def __init__(self, arg0) -> None: ...

    @overload
    def __init__(self, arg0, arg1: pyopensot.AffineHelper) -> None: ...

    def getActualPose(self) -> numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getBaseLink(self) -> str: ...

    def getCachedAccelerationReference(self) -> numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getCachedVelocityReference(self) -> numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getDistalLink(self) -> str: ...

    def getKd(self) -> numpy.ndarray[tuple[Literal[3], Literal[3]], numpy.dtype[numpy.float64]]: ...

    def getKp(self) -> numpy.ndarray[tuple[Literal[3], Literal[3]], numpy.dtype[numpy.float64]]: ...

    def getLambda2(self) -> float: ...

    def getPosError(self) -> numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getReference(self) -> tuple[
        numpy.ndarray[tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]]: ...

    def reset(self) -> bool: ...

    def setGains(self,
                 arg0: numpy.ndarray[tuple[Literal[3], Literal[3]], numpy.dtype[numpy.float64]],
                 arg1: numpy.ndarray[
                     tuple[Literal[3], Literal[3]], numpy.dtype[numpy.float64]]) -> None: ...

    def setKd(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[3]], numpy.dtype[numpy.float64]]) -> None: ...

    def setKp(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[3]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setLambda(self, arg0: float) -> None: ...

    @overload
    def setLambda(self, arg0: float, arg1: float) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setReference(self,
                     arg0: numpy.ndarray[tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]],
                     arg1: numpy.ndarray[
                         tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...


class DynamicFeasibility(pyopensot.Task):
    def __init__(self, arg0: str, arg1, arg2: pyopensot.AffineHelper,
                 arg3: list[pyopensot.AffineHelper], arg4: list[str]) -> None: ...

    def checkTask(self, arg0: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.float64]]) -> \
    numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def disableContact(self, arg0: str) -> bool: ...

    def enableContact(self, arg0: str) -> bool: ...

    def getEnabledContacts(self) -> list[bool]: ...


class Postural(pyopensot.Task):
    @overload
    def __init__(self, arg0, arg1: pyopensot.AffineHelper, task_id: str = ...) -> None: ...

    @overload
    def __init__(self, arg0, task_id: str = ...) -> None: ...

    def getActualPositions(self) -> numpy.ndarray[
        tuple[M, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getCachedAccelerationReference(self) -> numpy.ndarray[
        tuple[M, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getCachedVelocityReference(self) -> numpy.ndarray[
        tuple[M, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getError(self) -> numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getGainType(self, *args, **kwargs): ...

    def getKd(self) -> numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]: ...

    def getKp(self) -> numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]: ...

    def getLambda2(self) -> float: ...

    def getReference(self) -> tuple[
        numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[M, Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[M, Literal[1]], numpy.dtype[numpy.float64]]]: ...

    def getVelocityError(self) -> numpy.ndarray[
        tuple[M, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def reset(self) -> bool: ...

    def setGainType(self, arg0) -> None: ...

    def setGains(self, arg0: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]],
                 arg1: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]) -> None: ...

    def setKd(self, arg0: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]) -> None: ...

    def setKp(self, arg0: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setLambda(self, arg0: float, arg1: float) -> None: ...

    @overload
    def setLambda(self, arg0: float) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[
        tuple[M, Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.float64]],
                     arg1: numpy.ndarray[
                         tuple[M, Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.float64]],
                     arg1: numpy.ndarray[tuple[M, Literal[1]], numpy.dtype[numpy.float64]],
                     arg2: numpy.ndarray[
                         tuple[M, Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...
