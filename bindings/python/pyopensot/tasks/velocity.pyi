from typing import Literal, overload, TypeVar

import numpy
import pyopensot

M = TypeVar("M", bound=int)
N = TypeVar("N", bound=int)


class AngularMomentum(pyopensot.Task):
    def __init__(self, arg0) -> None: ...

    def getBaseLink(self) -> str: ...

    def getDistalLink(self) -> str: ...

    def getReference(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    def setReference(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...


class Cartesian(pyopensot.Task):
    orientationErrorGain: float

    def __init__(self, arg0: str, arg1, arg2: str, arg3: str) -> None: ...

    def getActualPose(self) -> numpy.ndarray[
        tuple[Literal[4], Literal[4]], numpy.dtype[numpy.float64]]: ...

    def getCachedVelocityReference(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getError(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getReference(self, *args, **kwargs): ...

    def reset(self) -> bool: ...

    def setIsBodyJacobian(self, arg0: bool) -> None: ...

    def setReference(self, *args, **kwargs): ...

    @property
    def baseLink(self) -> str: ...

    @property
    def baseLinkIsWorld(self) -> bool: ...

    @property
    def distalLink(self) -> str: ...


class CartesianAdmittance(Cartesian):
    def __init__(self, arg0: str, arg1, arg2: str, arg3) -> None: ...

    def computeParameters(self, arg0: numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]], arg1: numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]], arg2: float, arg3: float,
                          arg4: numpy.ndarray[
                              tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]],
                          arg5: numpy.ndarray[
                              tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]],
                          arg6: numpy.ndarray[tuple[Literal[6], Literal[1]], numpy.dtype[
                              numpy.float64]]) -> bool: ...

    def getCartesianCompliance(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[6]], numpy.dtype[numpy.float64]]: ...

    def getWrenchReference(self) -> numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def setDeadZone(self, arg0: numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]) -> bool: ...

    def setFilterDamping(self, arg0: float) -> None: ...

    def setImpedanceParams(self, arg0: numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]], arg1: numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]], arg2: float,
                           arg3: float) -> None: ...

    def setLambda(self, arg0: float) -> None: ...

    def setRawParams(self,
                     arg0: numpy.ndarray[tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]],
                     arg1: numpy.ndarray[tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]],
                     arg2: float, arg3: float) -> bool: ...

    def setWrenchReference(self, arg0: numpy.ndarray[
        tuple[Literal[6], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...


class CoM(pyopensot.Task):
    def __init__(self, arg0, id: str = ...) -> None: ...

    def getActualPosition(self) -> numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getBaseLink(self) -> str: ...

    def getCachedVelocityReference(self) -> numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getDistalLink(self) -> str: ...

    def getError(self) -> numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getReference(self) -> tuple[
        numpy.ndarray[tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]]: ...

    def reset(self) -> bool: ...

    def setLambda(self, arg0: float) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[
        tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setReference(self,
                     arg0: numpy.ndarray[tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]],
                     arg1: numpy.ndarray[
                         tuple[Literal[3], Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...


class Gaze(pyopensot.Task):
    def __init__(self, arg0: str, arg1, arg2: str, arg3: str) -> None: ...

    def getActiveJointsMask(self) -> list[bool]: ...

    def getConstraints(self) -> list[pyopensot.Constraint]: ...

    def getDistalLink(self) -> str: ...

    def getOrientationErrorGain(self) -> float: ...

    def getTaskSize(self) -> int: ...

    def setActiveJointsMask(self, arg0: list[bool]) -> bool: ...

    def setBaseLink(self, arg0: str) -> bool: ...

    def setGaze(self, *args, **kwargs): ...

    def setLambda(self, arg0: float) -> None: ...

    def setOrientationErrorGain(self, arg0: float) -> None: ...

    def setWeight(self, arg0: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]) -> None: ...


class Manipulability(pyopensot.Task):
    @overload
    def __init__(self, arg0, arg1: Cartesian, step: float = ...) -> None: ...

    @overload
    def __init__(self, arg0, arg1: CoM, step: float = ...) -> None: ...

    def ComputeManipulabilityIndex(self) -> float: ...

    def getW(self) -> numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]: ...

    def setLambda(self, arg0: float) -> None: ...

    def setW(self, arg0: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]) -> None: ...


class MinimumEffort(pyopensot.Task):
    def __init__(self, arg0, step: float = ...) -> None: ...

    def ComputeEffort(self) -> float: ...

    def getW(self) -> numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]: ...

    def setLambda(self, arg0: float) -> None: ...

    def setW(self, arg0: numpy.ndarray[tuple[M, N], numpy.dtype[numpy.float64]]) -> None: ...


class Postural(pyopensot.Task):
    def __init__(self, arg0, task_id: str = ...) -> None: ...

    def getActualPositions(self) -> numpy.ndarray[
        tuple[N, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getCachedVelocityReference(self) -> numpy.ndarray[
        tuple[N, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getError(self) -> numpy.ndarray[tuple[N, Literal[1]], numpy.dtype[numpy.float64]]: ...

    def getReference(self) -> tuple[
        numpy.ndarray[tuple[N, Literal[1]], numpy.dtype[numpy.float64]], numpy.ndarray[
            tuple[N, Literal[1]], numpy.dtype[numpy.float64]]]: ...

    def reset(self) -> bool: ...

    def setLambda(self, arg0: float) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[
        tuple[N, Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...

    @overload
    def setReference(self, arg0: numpy.ndarray[tuple[N, Literal[1]], numpy.dtype[numpy.float64]],
                     arg1: numpy.ndarray[
                         tuple[N, Literal[1]], numpy.dtype[numpy.float64]]) -> None: ...
